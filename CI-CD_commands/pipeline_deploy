properties([
  [$class: 'BuildDiscarderProperty',
    strategy: [
      $class: 'LogRotator',
      numToKeepStr: '4',
    ]
  ],
  parameters([
    [$class: 'ChoiceParameter',
        choiceType: 'PT_SINGLE_SELECT',
        filterLength: 1,
        filterable: false,
        name: 'ROUTE_BLUE',
        description: 'Select the weight for load balancer to the routing service for blue namespace', 
        script: [
          $class: 'GroovyScript',
          fallbackScript: [
                 classpath: [],
                 sandbox: false,
                 script: 'return ["error"]'
                 ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']"
        ]
     ]
   ],
   [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'ROUTE_GRN',
       description: 'Select the weight for load balancer to the routing service for green namespace',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      filterLength: 1,
      filterable: false,
      name: 'BLUE_ROUTE_TAG',
      description: 'Select the tag of the image for routing pods to blue namespace',
      script: [
        $class: 'GroovyScript',
        script: [
            classpath: [],
            sandbox: false,
            script: '''import groovy.json.JsonSlurper

def ecr_images_json = ['bash', '-c', "aws ecr list-images --repository-name gateway --filter tagStatus=TAGGED --region ${AWS_REGION}"].execute().text
def data = new JsonSlurper().parseText(ecr_images_json)
def ecr_images = [];
data.imageIds.each {
 if ( "$it.imageTag".length() >= 1 )  {
       ecr_images.push("$it.imageTag")
    }
}

return ecr_images.reverse()
            '''
        ]
      ]
    ],
    [$class: 'ChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      filterLength: 1,
      filterable: false,
      name: 'GRN_ROUTE_TAG',
      description: 'Select the tag of the image for routing pods to green namespace',
      script: [
        $class: 'GroovyScript',
        script: [
            classpath: [],
            sandbox: false,
            script: '''import groovy.json.JsonSlurper

def ecr_images_json = ['bash', '-c', "aws ecr list-images --repository-name gateway --filter tagStatus=TAGGED --region ${AWS_REGION}"].execute().text
def data = new JsonSlurper().parseText(ecr_images_json)
def ecr_images = [];
data.imageIds.each {
 if ( "$it.imageTag".length() >= 1 )  {
       ecr_images.push("$it.imageTag")
    }
}

return ecr_images.reverse()
            '''
        ]
      ]
    ],
    [$class: 'ChoiceParameter',
        choiceType: 'PT_SINGLE_SELECT',
        filterLength: 1,
        filterable: false,
        name: 'GREEN_ROUTE_GREEN_WEIGHT',
        description: 'Select the weight of app in green namespace for green routing pods',
        script: [
          $class: 'GroovyScript',
          fallbackScript: [
                 classpath: [],
                 sandbox: false,
                 script: 'return ["error"]'
                 ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']"
        ]
     ]
   ],
   [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'GREEN_ROUTE_BLUE_WEIGHT',
       description: 'Select the weight of app in blue namespace for green routing pods',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'BLUE_ROUTE_BLUE_WEIGHT',
       description: 'Select the weight of app in blue namespace for blue routing pods',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
        choiceType: 'PT_SINGLE_SELECT',
        filterLength: 1,
        filterable: false,
        name: 'BLUE_ROUTE_GREEN_WEIGHT',
        description: 'Select the weight of app in green namespace for blue routing pods',
        script: [
          $class: 'GroovyScript',
          fallbackScript: [
                 classpath: [],
                 sandbox: false,
                 script: 'return ["error"]'
                 ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']"
        ]
     ]
   ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'BLUE_PDB_MIN_AV',
       description: 'Select the weight of minimum number of available nginx green pods (in %)',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30:selected', '40', '50', '60', '70', '80', '90', '100']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'GRN_PDB_MIN_AV',
       description: 'Select the weight of minimum number of available nginx green pods (in %)',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30:selected', '40', '50', '60', '70', '80', '90', '100']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      filterLength: 1,
      filterable: false,
      name: 'BLUE_IMAGE_TAG',
      description: 'Select the image tag of the app in blue namespace',
      script: [
        $class: 'GroovyScript',
        script: [
            classpath: [],
            sandbox: false,
            script: '''import groovy.json.JsonSlurper

def ecr_images_json = ['bash', '-c', "aws ecr list-images --repository-name ecr_images_from_jenkins --filter tagStatus=TAGGED --region ${AWS_REGION}"].execute().text
def data = new JsonSlurper().parseText(ecr_images_json)
def ecr_images = [];
data.imageIds.each {
 if ( "$it.imageTag".length() >= 1 )  {
       ecr_images.push("$it.imageTag")
    }
}

return ecr_images.reverse()
            '''
        ]
      ]
    ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'BLUE_LIMIT_CPU',
       description: 'Select the CPU limit for nginx blue pods',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0.25', '0.5:selected', '0.75', '1']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'BLUE_REQUEST_CPU',
       description: 'Select the CPU limit for nginx blue pods',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0.25:selected', '0.5', '0.75', '1']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'BLUE_CPU_PERCENT',
       description: 'Select the CPU % for nginx HPA in blue namespace',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30', '40', '50:selected', '60', '70', '80', '90', '100']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'BLUE_HPA_MIN_COUNT',
       description: 'Select the minimum number of nginx blue pods for HPA',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['1', '2', '3:selected', '4', '5', '6', '7', '8', '9', '10']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'BLUE_HPA_MAX_COUNT',
       description: 'Select the maximum number of nginx blue pods for HPA',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['1', '2', '3', '4', '5', '6', '7', '8', '9', '10:selected']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      filterLength: 1,
      filterable: false,
      name: 'GRN_IMAGE_TAG',
      description: 'Select the image tag of the app in green namespace',
      script: [
        $class: 'GroovyScript',
        script: [
            classpath: [],
            sandbox: false,
            script: '''import groovy.json.JsonSlurper

def ecr_images_json = ['bash', '-c', "aws ecr list-images --repository-name ecr_images_from_jenkins --filter tagStatus=TAGGED --region ${AWS_REGION}"].execute().text
def data = new JsonSlurper().parseText(ecr_images_json)
def ecr_images = [];
data.imageIds.each {
 if ( "$it.imageTag".length() >= 1 )  {
       ecr_images.push("$it.imageTag")
    }
}

return ecr_images.reverse()
            '''
        ]
      ]
    ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'GRN_LIMIT_CPU',
       description: 'Select the CPU limit for nginx blue pods',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0.25', '0.5:selected', '0.75', '1']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'GRN_REQUEST_CPU',
       description: 'Select the CPU limit for nginx blue pods',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0.25:selected', '0.5', '0.75', '1']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'GRN_CPU_PERCENT',
       description: 'Select the CPU % for nginx HPA in green namespace',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30', '40', '50':selected, '60', '70', '80', '90', '100']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'GRN_HPA_MIN_COUNT',
       description: 'Select the minimum number of nginx green pods for HPA',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['1', '2', '3':selected, '4', '5', '6', '7', '8', '9', '10']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'GRN_HPA_MAX_COUNT',
       description: 'Select the maximum number of nginx green pods for HPA',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['1', '2', '3', '4', '5', '6', '7', '8', '9', '10':selected]"
         ]
      ]
    ]
 ])
])
pipeline {
    agent any
    stages {
        stage('Get files') {
            steps {
              checkout([
                $class: 'GitSCM',
                branches: [[name: 'main']],
                userRemoteConfigs: [[
                url: 'git@github.com:gitmaks/k8s.git',
                credentialsId: 'docker_git',
                  ]]
                ])
            }
        }
        stage('Modify yml & apply') {
            steps {
              sh '''#!/bin/bash
                if [ $BLUE_ROUTE_BLUE_WEIGHT == 0 ];
                then
                   sed -i '/nginx-service-blue/d' configmap-blue/templates/configmap-blue.yml
                fi
                if [ $GREEN_ROUTE_BLUE_WEIGHT == 0 ];
                then
                   sed -i '/nginx-service-green/d' configmap-grn/templates/configmap-grn.yml
                fi
                if [ $BLUE_ROUTE_GREEN_WEIGHT == 0 ];
                then
                   sed -i '/nginx-service-blue/d' configmap-blue/templates/configmap-blue.yml
                fi
                if [ $GREEN_ROUTE_GREEN_WEIGHT == 0 ];
                then
                   sed -i '/nginx-service-green/d' configmap-grn/templates/configmap-grn.yml
                fi
                aws eks update-kubeconfig --name ${CLUSTER_NAME} && chmod 600 /home/jenkins/.kube/config
                helm upgrade --install namespace-nginx-blue ./namespace-nginx-blue
                helm upgrade --install namespace-nginx-grn ./namespace-nginx-grn
                helm upgrade --install namespace-route ./namespace-route
                helm upgrade --install configmap-blue ./configmap-blue --set BLUE_WEIGHT=$BLUE_ROUTE_BLUE_WEIGHT --set GREEN_WEIGHT=$BLUE_ROUTE_GREEN_WEIGHT
                helm upgrade --install configmap-grn ./configmap-grn --set BLUE_WEIGHT=$GREEN_ROUTE_BLUE_WEIGHT --set GREEN_WEIGHT=$GREEN_ROUTE_GREEN_WEIGHT
                helm upgrade --install route-deploy-blue ./route-deploy-blue --set AWS_REGION=${AWS_REGION} --set ACCOUNT_ID=${ACCOUNT_ID} --set BLUE_ROUTE_TAG=$BLUE_ROUTE_TAG
                helm upgrade --install route-deploy-grn ./route-deploy-grn --set AWS_REGION=${AWS_REGION} --set ACCOUNT_ID=${ACCOUNT_ID} --set GRN_ROUTE_TAG=$GRN_ROUTE_TAG
                helm upgrade --install route-service-blue ./route-service-blue
                helm upgrade --install route-service-grn ./route-service-grn
                helm upgrade --install nginx-deploy-blue ./nginx-deploy-blue --set ACCOUNT_ID=${ACCOUNT_ID}  --set AWS_REGION=${AWS_REGION} --set IMAGE_TAG=$BLUE_IMAGE_TAG --set LIMIT_CPU=$BLUE_LIMIT_CPU --set REQUEST_CPU=$BLUE_REQUEST_CPU
                helm upgrade --install nginx-deploy-grn ./nginx-deploy-grn --set ACCOUNT_ID=${ACCOUNT_ID}  --set AWS_REGION=${AWS_REGION} --set IMAGE_TAG=$GRN_IMAGE_TAG --set LIMIT_CPU=$GRN_LIMIT_CPU --set REQUEST_CPU=$GRN_REQUEST_CPU
                helm upgrade --install nginx-pdb-blue ./nginx-pdb-blue --set PDB_MIN_AV=$BLUE_PDB_MIN_AV
                helm upgrade --install nginx-pdb-grn ./nginx-pdb-grn --set PDB_MIN_AV=$GRN_PDB_MIN_AV
                kubectl apply -f metrics-server.yml
                helm upgrade --install nginx-hpa-blue ./nginx-hpa-blue --set CPU_PERCENT=$BLUE_CPU_PERCENT --set MIN_COUNT=$BLUE_HPA_MIN_COUNT --set MAX_COUNT=$BLUE_HPA_MAX_COUNT
                helm upgrade --install nginx-hpa-grn ./nginx-hpa-grn --set CPU_PERCENT=$GRN_CPU_PERCENT --set MIN_COUNT=$GRN_HPA_MIN_COUNT --set MAX_COUNT=$GRN_HPA_MAX_COUNT
                helm upgrade --install nginx-service-blue ./nginx-service-blue
                helm upgrade --install nginx-service-grn ./nginx-service-grn
                helm upgrade --install ingress ./ingress --set ROUTE_GRN=$ROUTE_GRN --set ROUTE_BLUE=$ROUTE_BLUE --set Owner=Maxim_Manovitskiy
              '''
            }
        }
        stage('Setup ingress service acc') {
           steps {
             catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh '''
                eksctl utils associate-iam-oidc-provider \
                  --cluster ${CLUSTER_NAME} \
                  --approve
                eksctl utils associate-iam-oidc-provider --cluster=${CLUSTER_NAME} --approve
                eksctl create iamserviceaccount \
                  --cluster=${CLUSTER_NAME} \
                  --namespace=kube-system \
                  --name=aws-load-balancer-controller \
                  --attach-policy-arn=arn:aws:iam::${ACCOUNT_ID}:policy/AWSLoadBalancerControllerIAMPolicy \
                  --override-existing-serviceaccounts \
                  --approve
              '''
            }
          }
        }
        stage('Apply Ingress controller') {
           steps {
             sh '''
               kubectl apply --validate=false -f cert-manager.yml
               sed -i "s/CLUSTER_NAME/${CLUSTER_NAME}/g" ingress-controller.yaml
	       sleep 15
               kubectl apply -f ingress-controller.yaml
             '''
          }
        }
        stage('Clear WS') {
            steps {
             echo 'Cleaning workspace'
             cleanWs()
           }
         }
    }
}
