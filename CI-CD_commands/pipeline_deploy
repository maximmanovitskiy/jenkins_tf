properties([
  [$class: 'BuildDiscarderProperty',
    strategy: [
      $class: 'LogRotator',
      numToKeepStr: '4',
    ]
  ],
  parameters([
    [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'ENV',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['blue&green:selected', 'blue', 'green']"
        ]
     ]
    ],
    [$class: 'ChoiceParameter',
        choiceType: 'PT_SINGLE_SELECT',
        filterLength: 1,
        filterable: false,
        name: 'ROUTE-BLUE',
        script: [
          $class: 'GroovyScript',
          fallbackScript: [
                 classpath: [],
                 sandbox: false,
                 script: 'return ["error"]'
                 ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']"
        ]
     ]
   ],
   [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'ROUTE-GRN',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      filterLength: 1,
      filterable: false,
      name: 'BLUE_ROUTE_TAG',
      script: [
        $class: 'GroovyScript',
        script: [
            classpath: [],
            sandbox: false,
            script: '''import groovy.json.JsonSlurper

def ecr_images_json = ['bash', '-c', "aws ecr list-images --repository-name gateway --filter tagStatus=TAGGED --region us-east-1"].execute().text
def data = new JsonSlurper().parseText(ecr_images_json)
def ecr_images = [];
data.imageIds.each {
 if ( "$it.imageTag".length() >= 1 )  {
       ecr_images.push("$it.imageTag")
    }
}

return ecr_images.reverse()
            '''
        ]
      ]
    ],
    [$class: 'ChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      filterLength: 1,
      filterable: false,
      name: 'GRN_ROUTE_TAG',
      script: [
        $class: 'GroovyScript',
        script: [
            classpath: [],
            sandbox: false,
            script: '''import groovy.json.JsonSlurper

def ecr_images_json = ['bash', '-c', "aws ecr list-images --repository-name gateway --filter tagStatus=TAGGED --region us-east-1"].execute().text
def data = new JsonSlurper().parseText(ecr_images_json)
def ecr_images = [];
data.imageIds.each {
 if ( "$it.imageTag".length() >= 1 )  {
       ecr_images.push("$it.imageTag")
    }
}

return ecr_images.reverse()
            '''
        ]
      ]
    ],
    [$class: 'ChoiceParameter',
        choiceType: 'PT_SINGLE_SELECT',
        filterLength: 1,
        filterable: false,
        name: 'GREEN_WEIGHT',
        script: [
          $class: 'GroovyScript',
          fallbackScript: [
                 classpath: [],
                 sandbox: false,
                 script: 'return ["error"]'
                 ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']"
        ]
     ]
   ],
   [$class: 'ChoiceParameter',
       choiceType: 'PT_SINGLE_SELECT',
       filterLength: 1,
       filterable: false,
       name: 'BLUE_WEIGHT',
       script: [
         $class: 'GroovyScript',
         fallbackScript: [
                classpath: [],
                sandbox: false,
                script: 'return ["error"]'
                ],
         script: [
            classpath: [],
            sandbox: false,
            script: "return['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']"
         ]
      ]
    ],
    [$class: 'ChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      filterLength: 1,
      filterable: false,
      name: 'BLUE_IMAGE_TAG',
      script: [
        $class: 'GroovyScript',
        script: [
            classpath: [],
            sandbox: false,
            script: '''import groovy.json.JsonSlurper

def ecr_images_json = ['bash', '-c', "aws ecr list-images --repository-name ecr_images_from_jenkins --filter tagStatus=TAGGED --region us-east-1"].execute().text
def data = new JsonSlurper().parseText(ecr_images_json)
def ecr_images = [];
data.imageIds.each {
 if ( "$it.imageTag".length() >= 1 )  {
       ecr_images.push("$it.imageTag")
    }
}

return ecr_images.reverse()
            '''
        ]
      ]
    ],
    [$class: 'ChoiceParameter',
      choiceType: 'PT_SINGLE_SELECT',
      filterLength: 1,
      filterable: false,
      name: 'GRN_IMAGE_TAG',
      script: [
        $class: 'GroovyScript',
        script: [
            classpath: [],
            sandbox: false,
            script: '''import groovy.json.JsonSlurper

def ecr_images_json = ['bash', '-c', "aws ecr list-images --repository-name ecr_images_from_jenkins --filter tagStatus=TAGGED --region us-east-1"].execute().text
def data = new JsonSlurper().parseText(ecr_images_json)
def ecr_images = [];
data.imageIds.each {
 if ( "$it.imageTag".length() >= 1 )  {
       ecr_images.push("$it.imageTag")
    }
}

return ecr_images.reverse()
            '''
        ]
      ]
    ]
 ])
])
pipeline {
    agent any
    stages {
        stage('Get files') {
            steps {
              checkout([
                $class: 'GitSCM',
                branches: [[name: 'main']],
                userRemoteConfigs: [[
                url: 'git@github.com:gitmaks/k8s.git',
                credentialsId: 'docker_git',
                  ]]
                ])
            }
        }
        stage('Modify yml & apply') {
            steps {
              sh '''#!/bin/bash
                sed -i "s/ACCOUNT_ID/${ACCOUNT_ID}/g" *.yml
                sed -i "s/AWS_REGION/${AWS_REGION}/g" *.yml
                sed -i "s/ROUTE-GRN/$ROUTE-GRN/g" ingress.yml
                sed -i "s/ROUTE-BLUE/$ROUTE-BLUE/g" ingress.yml
                aws eks update-kubeconfig --name nginx-eks
                if [ $ENV == 'green' ];
                then
                    sed -i "s/\$GREEN_WEIGHT/$GREEN_WEIGHT/g" server-grn.conf
                    sed -i "s/GRN_ROUTE_TAG/$GRN_ROUTE_TAG/g" route-pod-grn.yml
                    sed -i "s/IMAGE_TAG/$GRN_IMAGE_TAG/g" nginx-deploy-grn.yml
                    kubectl create configmap route-grn --from-file server-grn.conf -n route || \
                    kubectl create configmap route-grn --from-file server-grn.conf -o yaml --dry-run=client -n route | kubectl replace -f -
                    kubectl apply $(ls route-*-grn.yml | awk ' { print " -f " $1 } ')
                    kubectl apply $(ls nginx-*-grn.yml | awk ' { print " -f " $1 } ')
                elif [ $ENV == 'blue' ];
                then
                    sed -i "s/\$BLUE_WEIGHT/$BLUE_WEIGHT/g" server-blue.conf
                    sed -i "s/BLUE_ROUTE_TAG/$BLUE_ROUTE_TAG/g" route-pod-blue.yml
                    sed -i "s/IMAGE_TAG/$BLUE_IMAGE_TAG/g" nginx-deploy-blue.yml
                    kubectl create configmap route-blue --from-file server-blue.conf -n route || \
                    kubectl create configmap route-blue --from-file server-blue.conf -o yaml --dry-run=client -n route | kubectl replace -f -
                    kubectl apply $(ls route-*-blue.yml | awk ' { print " -f " $1 } ')
                    kubectl apply $(ls nginx-*-blue.yml | awk ' { print " -f " $1 } ')
                elif [ $ENV == 'blue&green' ];
                then
                    sed -i "s/\$BLUE_WEIGHT/$BLUE_WEIGHT/g" server-blue.conf
                    sed -i "s/BLUE_ROUTE_TAG/$BLUE_ROUTE_TAG/g" route-pod-blue.yml
                    sed -i "s/\$GREEN_WEIGHT/$GREEN_WEIGHT/g" server-grn.conf
                    sed -i "s/GRN_ROUTE_TAG/$GRN_ROUTE_TAG/g" route-pod-grn.yml
                    sed -i "s/IMAGE_TAG/$BLUE_IMAGE_TAG/g" nginx-deploy-blue.yml
                    sed -i "s/IMAGE_TAG/$GRN_IMAGE_TAG/g" nginx-deploy-grn.yml
                    kubectl create configmap route-blue --from-file server-blue.conf -n route || \
                    kubectl create configmap route-blue --from-file server-blue.conf -o yaml --dry-run=client -n route | kubectl replace -f -
                    kubectl create configmap route-grn --from-file server-grn.conf -n route || \
                    kubectl create configmap route-grn --from-file server-grn.conf -o yaml --dry-run=client -n route | kubectl replace -f -
                    kubectl apply $(ls route-*.yml | awk ' { print " -f " $1 } ')
                    kubectl apply $(ls nginx-*.yml | awk ' { print " -f " $1 } ')
                fi
              '''
            }
        }
        stage('Setup ingress service acc') {
           steps {
             catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh '''
                eksctl utils associate-iam-oidc-provider \
                  --cluster ${CLUSTER_NAME} \
                  --approve
                eksctl utils associate-iam-oidc-provider --cluster=${CLUSTER_NAME} --approve
                eksctl create iamserviceaccount \
                  --cluster=${CLUSTER_NAME} \
                  --namespace=kube-system \
                  --name=aws-load-balancer-controller \
                  --attach-policy-arn=arn:aws:iam::${ACCOUNT_ID}:policy/AWSLoadBalancerControllerIAMPolicy \
                  --override-existing-serviceaccounts \
                  --approve
              '''
            }
          }
        }
        stage('Apply Ingress controller') {
           steps {
             sh '''
               kubectl apply --validate=false -f cert-manager.yml
               sed -i "s/CLUSTER_NAME/${CLUSTER_NAME}/g" ingress-controller.yaml
	       sleep 15
               kubectl apply -f ingress-controller.yaml
             '''
          }
        }
        stage('Clear WS') {
            steps {
             echo 'Cleaning workspace'
             cleanWs()
           }
         }
    }
}
